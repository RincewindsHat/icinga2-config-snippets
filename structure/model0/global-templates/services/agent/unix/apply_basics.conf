apply Service "load" {
  import "agent-service"

  check_command = "load"

  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent"
}

apply Service "procs" {
  import "agent-service"

  check_command = "procs"

  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent"
  vars.proc_warning = 400
  vars.proc_warning = 500
}

apply Service "swap" {
  import "agent-service"

  check_command = "swap"

  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent" && host.vars.swap == true
}

apply Service "users" {
  import "agent-service"

  check_command = "users"

  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent"
}

apply Service "apt" {
  import "agent-service"

  check_command = "apt"
  check_interval = 12h

  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent" && host.vars.distro == "debian"
}

apply Service "memory" {
  import "agent-service"

  vars += {
    memory_warning = "20%",
    memory_critical = "20%"
  }

  check_command = "memory"
  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent" && host.vars.distro == "debian"
}

apply Service "uptime" {
  import "agent-service"

  check_command = "uptime"

  assign where host.vars.os == "linux" && host.vars.architecture == "x86_64" && host.vars.transport_mode == "icinga_agent"
}

apply Service "DHCP available" {
  import "agent-service"

  check_command = "dhcp"

  assign where host.vars.os == "linux" && host.vars.dhcp_client == true && host.vars.transport_mode == "icinga_agent"
}

apply Service "Filesystem " for (filesystem => config in host.vars.disks) {
  import "agent-service"

  check_command = "disk"

  vars += config
  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent"
}

apply Service "Filesystems summary" {
  import "agent-service"

  check_command = "disk"

  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent" && ! host.vars.disks
}

apply Service "Timesync " for (ntp_address in host.vars.network.ntp_servers) {
  import "agent-service"

  check_command = "ntp_time"

  vars.ntp_address = ntp_address
  assign where host.vars.os == "linux" && host.vars.transport_mode == "icinga_agent" && host.vars.network.ntp_servers
}
